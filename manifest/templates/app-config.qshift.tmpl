# Backstage override configuration for QShift

organization:
  name: QShift

app:
  title: QShift Backstage App
  baseUrl: ${BACKSTAGE_APP_BASE_URL}

backend:
  baseUrl: ${BACKSTAGE_BACKEND_BASE_URL}
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: ${BACKSTAGE_APP_BASE_URL} # Please include the port when using localhost !!
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  auth:
    # Used for enabling authentication, secret is shared by all backend plugins
    # See https://backstage.io/docs/auth/service-to-service-auth for
    # information on the format
    externalAccess:
      - type: static
        options:
          token: ${BACKSTAGE_AUTH_TOKEN}
          subject: curl-requests

auth:
  environment: development
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    guest: {
      dangerouslyAllowOutsideDevelopment: true
    }

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

catalog:
  import:
    entityFilename: catalog-info.yaml
  rules:
    - allow: [API,Component,User,Group,Location,Resource,System,Template]
  locations:
    # Quarkus template, org, entity
    - type: file
      target: ../../locations/root.yaml
      rules:
        - allow: [API,Component,User,Group,Location,Resource,System,Template]

    #- type: url
    #  target: ${TEMPLATE_URL} # default could be : https://github.com/q-shift/backstage-playground/blob/main/locations/root.yaml
    #  rules:
    #    - allow: [API,Component,User,Group,Location,Resource,System,Template]

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
      token: ${GITHUB_PERSONAL_ACCESS_TOKEN}
  gitea:
    - host: ${GITEA_HOST}
      username: ${GITEA_USERNAME}
      password: "${GITEA_PASSWORD}"

argocd:
  username: ${ARGOCD_ADMIN_USER}
  password: ${ARGOCD_ADMIN_PASSWORD}
  baseUrl: ${ARGOCD_SERVER}
  appLocatorMethods:
    - type: config
      instances:
        - name: argocdQShift
          url: ${ARGOCD_SERVER}

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: ${KUBERNETES_API_URL} # For in-cluster use: https://kubernetes.default.svc
          name: ocp-qshift
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          skipMetricsLookup: true
          serviceAccountToken: ${KUBERNETES_TOKEN} # Example: kubectl -n backstage get secret my-backstage-token-2l7b2 -o go-template='{{.data.token | base64decode}}'
  customResources:
    - group: 'tekton.dev'
      apiVersion: 'v1'
      plural: 'pipelineruns'
    - group: 'tekton.dev'
      apiVersion: 'v1'
      plural: 'taskruns'
    - apiVersion: 'v1'
      group: 'route.openshift.io'
      plural: 'routes'
