#!/bin/bash


##########################################
######## BEGIN - COMMON FUNCTIONS ########
##########################################
# Define the green and red color escape sequences
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fallback to the second argument if the first is empty
setf() {
  if [ -z "${!1}" ]; then
    export "$1"="$2"
  fi
}

# Print key-value pair in green if value is not empty, otherwise in red
printv() {
  if [ -z "$2" ]; then
    echo -e "${RED}$1${NC}=${RED}<empty>${NC}"
  else
    echo -e "${GREEN}$1${NC}=$2"
  fi
}

# Print key-password pair in green if value is not empty, otherwise in red, replacing password with '*'
printp() {
  if [ -z "$2" ]; then
    echo -e "${RED}$1${NC}=${RED}<empty>${NC}"
  else
    echo -e "${GREEN}$1${NC}=********"
  fi
}

# Wait for process to finish while showing a spinner
waitp() {
  local pid=$1
  local message=$2
  local delay=0.1
  local spinner_chars="/-\|"
  echo -n "$message"
  while [ -d /proc/$pid ]; do
    for i in $(seq 0 3); do
      echo -ne "$message ${spinner_chars:i:1}" "\r"
      sleep $delay
    done
  done

  # Check the exit status of the process
  wait $pid
  local exit_status=$?

  # Replace spinner with a check mark or an X based on the result
  if [ $exit_status -eq 0 ]; then
    echo -e "$message ${GREEN}✔${NC}"
  else
    echo -e "$message ${RED}✘${NC}"
  fi
}
execute_kubectl() {
  local command=$*
  if $DRY_RUN; then
    echo "kubectl --dry-run=client $command "
    kubectl --dry-run=client $command
  else
    echo "kubectl $command"
    kubectl $command
  fi
}

execute_oc() {
  local command=$1
  if $DRY_RUN; then
    echo "oc $command "
  else
    echo "oc $command"
    oc $command
  fi
}

set_defaults() {
    # Kubernetes
    setf KUBERNETES_CONFIG_PATH "$HOME/.kube/config"
    setf KUBERNETES_API_URL `kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'`
    setf KUBERNETES_USER `kubectl config view --minify -o jsonpath='{.users[0].name}'`
    setf KUBERNETES_TOKEN `cat $KUBERNETES_CONFIG_PATH | grep -A 2 "name: $KUBERNETES_USER" | grep token | awk '{print $2}'`
    setf NAMESPACE `kubectl config view --minify -o jsonpath='{.contexts[0].context.namespace}'`


    # Argo CD
    setf ARGOCD_ADMIN_USER admin
    setf ARGOCD_ADMIN_PASSWORD `kubectl get secrets -n openshift-gitops argocd-cluster -o yaml | grep password | awk '{print $2}' | base64 -d`
    setf ARGOCD_COOKIE `kubectl get secrets -n openshift-gitops argocd-secret -o yaml | grep clientSecret | awk '{print $2}' | base64 -d`
    setf ARGOCD_SERVER "https://openshift-gitops-server-openshift-gitops.apps.qshift.snowdrop.dev"

    # Github
    if [ -z "$GITHUB_PERSONAL_ACCESS_TOKEN" ]; then
        if command -v gh &> /dev/null; then
            setf GITHUB_PERSONAL_ACCESS_TOKEN `gh auth status -t | grep Token: | awk -F": " '{print $2}'`
        else
            echo "GITHUB_PERSONAL_ACCESS_TOKEN is not defined and can't be read from 'gh' command. Aborting"
            exit 1
        fi
    fi

    # Gitea
    setf GITEA_HOST "localhost"
    setf GITEA_USERNAME "admin"
    setf GITEA_PASSWORD "admin"

    echo "Using values..."
    printv "BACKSTAGE_TITLE" "$BACKSTAGE_TITLE"
    printv "BACKSTAGE_ORG" "$BACKSTAGE_ORG"
    printv "BACKSTAGE_GITHUB_USER" "$BACKSTAGE_GITHUB_USER"
    printp "GITHUB_PERSONAL_ACCESS_TOKEN" "${GITHUB_PERSONAL_ACCESS_TOKEN:0:4}******"
    printv "GITEA_HOST" "$GITEA_HOST"
    printv "GITEA_USERNAME" "$GITEA_USERNAME"
    printp "GITEA_PASSWORD" "$GITEA_PASSWORD"
    printv "KUBERNETES_API_URL" "$KUBERNETES_API_URL"
    printv "KUBERNETES_USER" "$KUBERNETES_USER"
    printp "KUBERNETES_TOKEN" "$KUBERNETES_TOKEN"
    printp "NAMESPACE" "$NAMESPACE"
    printv "ARGOCD_SERVER" "$ARGOCD_SERVER"
    printv "ARGOCD_ADMIN_USER" "$ARGOCD_ADMIN_USER"
    printp "ARGOCD_ADMIN_PASSWORD" "$ARGOCD_ADMIN_PASSWORD"
}

########################################
######## END - COMMON FUNCTIONS ########
########################################

# Function for 'dev' subcommand
dev() {
    usage() {
      echo "Usage: $0 dev [options]"
      echo "Options:"
      echo "  -t, --title <title>                   The title of the Backstage instance"
      echo "  -o, --org <org>                       The organization name"
      echo "  -u, --github-user <github-user>       The GitHub user"
      echo "      --github-token <github-token>     The GitHub token"
      echo "      --gitea-host <host>               The Gitea Host"
      echo "      --gitea-user <gitea-user>         The Gitea username"
      echo "      --gitea-password <gitea-password> The Gitea username"
      exit 1
    }

    # Set defaults
    setf "BACKSTAGE_TITLE" "My Backstage"
    setf "BACKSTAGE_ORG" "q-shift"
    setf "BACKSTAGE_GITHUB_USER" "q-shift"
    setf "GITHUB_PERSONAL_ACCESS_TOKEN" ""
    setf "BACKSTAGE_TEAM_NAME" "team"
    setf "BACKSTAGE_APP_BASE_URL" "http://localhost:3000"
    setf "BACKSTAGE_BACKEND_BASE_URL" "http://localhost:7007"
    setf "BACKSTAGE_AUTH_TOKEN" `node -p 'require("crypto").randomBytes(24).toString("base64")'`

    #
    # Optionally override the default values (above) with command line arguments:
    # -t: Title
    # -o: Organization
    # --github-user: GitHub User
    # --github-token: GitHub Token
    #
    while [[ $# -gt 0 ]]; do
      echo "Processing $1"
      case $1 in
        -t|--title)
          BACKSTAGE_TITLE=$2
          shift 2
          ;;
        -o|--org)
          BACKSTAGE_ORG=$2
          shift 2
          ;;
        -u|--github-user)
          BACKSTAGE_GITHUB_USER=$2
          shift 2
          ;;
        --github-token)
          GITHUB_PERSONAL_ACCESS_TOKEN=$2
          shift 2
          ;;
        --gitea-url)
          GITEA_HOST=$2
          shift 2
          ;;
        --gitea-user)
          GITEA_USERNAME=$2
          shift 2
          ;;
          --gitea-password)
          GITEA_PASSWORD=$2
          shift 2
          ;;
        -h|--help)
          usage
          exit 0
          ;;
        -*|--*)
          echo "Unknown option $1"
          usage
          exit 1
          ;;
        *)
          POSITIONAL_ARGS+=("$1") # save positional arg
          shift # past argument
          ;;
      esac
    done

    echo "Generating app-config.local.yaml."

    # if kubectl does not exist, then exit
    if ! command -v kubectl &> /dev/null; then
        echo "kubectl is not installed. Aborting"
        exit 1
    fi

    # check if ~/.kube/config exists and if not, then exit
    if [ ! -f "$HOME/.kube/config" ]; then
        echo "Kubernetes config file ($HOME/.kube/config) does not exist. Aborting"
        exit 1
    fi

    # Run kubectl version asynchronously
    kubectl version > /dev/null 2>&1 &
    KUBECTL_PID=$!

    # Show spinner while waiting for kubectl to complete
    waitp $KUBECTL_PID "Checking connection to the Kubernetes cluster"

    # Wait for kubectl to finish
    wait $KUBECTL_PID
    KUBECTL_EXIT_CODE=$?

    # Check exit code and print result
    if [ $KUBECTL_EXIT_CODE -ne 0 ]; then
      exit 1
    fi

    set_defaults
    envsubst < manifest/templates/app-config.qshift.tmpl > app-config.local.yaml
    export NODE_TLS_REJECT_UNAUTHORIZED=0

    echo "Starting Backstage..."
    # Run Backstage in Development Mode
    yarn dev
}

# Function for 'provision-namespace' subcommand
provision_namespace() {
    #  This command will:
    #  - Create a new namespace,
    #  - Set the registry credentials to pull/push images: dockerhub, quay.io, etc,
    #  - Install a KubeVirt VM using your ssh key
    #  - Configure ArgoCD to access your resources
    #  Note: You can define the registry credentials using the parameters otherwise the script ask you to select for podman - $HOME/.config/containers/auth.json or docker - "$HOME/.docker/config.json" your file if they exist"

    function usage() {
      echo "Usage: $0 provision-namespace [options]"
      echo ""
      echo "This script will create a new namespace, set your registry credentials to pull/push images, install a KubeVirt VM using your ssh key and configure ArgoCD to access your resources !"
      echo "Note: You can define the registry credentials using the parameters otherwise the script ask you to select for podman - $HOME/.config/containers/auth.json or docker - "$HOME/.docker/config.json" your file if they exist"

      echo ""
      echo "Options:"
      echo "  -t, --title         <title>                            The title of the Backstage instance"
      echo "  -d, --domain        <domain>                           The domain of the OpenShift cluster"
      echo "  -n, --namespace     <namespace>                        Your namespace on the QShift cluster (mandatory)."
      echo "  -q, --quay-cred     <quay_username:quay_password>      The Quay registry credential: username:password to be used to push on quay.io."
      echo "  -o, --quay-org      <quay_organization>                The Quay registry organization hosting your images on quay.io."
      echo "  -d, --docker-cred   <docker_username:docker_password>  The docker registry credential: username:password on dockerhub."
      echo "  -k, --key-path      <public_key_path>                  The path of your public to ssh to the VM."
      echo "  --dry-run                                              Run the kubectl command with dry-run=client"
      exit 1
    }

    # Set defaults
    setf "BACKSTAGE_TITLE" "My Backstage"
    setf "OCP_CLUSTER_DOMAIN" "apps.qshift.snowdrop.dev"
    setf "BACKSTAGE_ORG" "q-shift"
    setf "BACKSTAGE_GITHUB_USER" "q-shift"
    setf "GITHUB_PERSONAL_ACCESS_TOKEN" ""
    setf "BACKSTAGE_TEAM_NAME" "team"
    setf "BACKSTAGE_APP_BASE_URL" "http://localhost:3000"
    setf "BACKSTAGE_BACKEND_BASE_URL" "http://localhost:7007"
    setf "BACKSTAGE_AUTH_TOKEN" `node -p 'require("crypto").randomBytes(24).toString("base64")'`


    DRY_RUN=false
    PUBLIC_KEY_PASS=$HOME/.ssh/id_rsa.pub
    SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
    TEMP_DIR=$SCRIPT_DIR/_temp


    mkdir -p $TEMP_DIR

    while [[ $# -gt 0 ]]; do
      case $1 in
        -t|--title)
          BACKSTAGE_TITLE=$2
          shift 2
          ;;
         --domain)
          OCP_CLUSTER_DOMAIN=$2
          shift 2
          ;;
        -n|--namespace)
          NAMESPACE=$2
          shift 2
          ;;
        -q|--quay)
          QUAY_CRED=$2
          shift 2
          ;;
        -o|--quay-org)
          QUAY_ORG=$2
          shift 2
          ;;
        -d|--docker)
          DOCKER_CRED=$2
          shift 2
          ;;
        -k|--key-path)
          PUBLIC_KEY_PASS=$2
          shift 2
          ;;
        --dry-run)
          DRY_RUN=true
          shift
          ;;
        -h|--help)
          usage
          exit 0
          ;;
        -*|--*)
          echo "Unknown option $1"
          usage
          exit 1
          ;;
        *)
          POSITIONAL_ARGS+=("$1") # save positional arg
          shift # past argument
          ;;
      esac
    done

    set_defaults

    # List of registry credentials files to check
    registry_creds_files=(
        "$HOME/.docker/config.json"
        "$HOME/.config/containers/auth.json"
    )
    available_files=()

    # Check which files exist and do not contain the exclude word
    for file in "${registry_creds_files[@]}"; do
        if [[ -f "$file" ]]; then
            # Check if the file does NOT contain: oskeychain as won't work to create the secret
            if ! grep -q "osxkeychain" "$file"; then
                available_files+=("$file")
            fi
        fi
    done

    if [[ ${#available_files[@]} -eq 0 ]]; then
        echo "No registry credentials files are available for selection, so we will use your DOCKER_CRED or QUAY_CRED arguments if provided"
        echo ""
    elif [[ ${#available_files[@]} -eq 1 ]]; then
      REGISTRY_CREDS_FILE=${available_files[0]}
    else
       # Show the user a list of available files and ask them to select one
       echo "Please select your credentials file; podman or docker if password are not managed by osxkeychain:"

       select file in "${available_files[@]}"; do
           if [[ -n "$file" ]]; then
               REGISTRY_CREDS_FILE=$file
               break
           else
               echo "Invalid choice, try again."
           fi
       done
    fi

    echo "Let's create the resources"
    echo "Using as values ..."
    printv "Your namespace" "$NAMESPACE"
    printv "Registry credentials file" "$REGISTRY_CREDS_FILE"
    printv "Quay registry username" "${QUAY_CRED%:*}"
    printp "Quay registry password" "${QUAY_CRED##*/}"
    printv "Quay registry organization" "$QUAY_ORG"
    printv "Dockerhub registry username" "${DOCKER_CRED%:*}"
    printp "Dockerhub registry password" "${DOCKER_CRED##*/}"
    printv "Public key path" "$PUBLIC_KEY_PASS"
    echo "....."

    echo "### Creating new project for: $NAMESPACE"
    execute_oc "new-project $NAMESPACE"

    echo "### Creating resources ..."
    if [[ "$REGISTRY_CREDS_FILE" ]]; then
      execute_kubectl "create secret generic dockerconfig-secret --from-file=$REGISTRY_CREDS_FILE"
      echo ""
    else
      if [[ (-n "$QUAY_CRED" && -n "$QUAY_ORG") || -n "$DOCKER_CRED" ]]; then
        QUAY_CRED_BASE64=$(echo -n "$QUAY_CRED" | base64)
        DOCKER_CRED_BASE64=$(echo -n "$DOCKER_CRED" | base64)
        envsubst < manifest/templates/docker.json.tmpl > $TEMP_DIR/config.json
      fi
    fi

    echo "### Creating the backstage service account"
    execute_kubectl "create sa my-backstage"
    echo ""
    echo "Give cluster-admin role to the backstage SA to access the kubernetes API resources"
    envsubst < manifest/templates/rbac.yaml.tmpl > $TEMP_DIR/rbac.yaml

    execute_kubectl "apply -f $TEMP_DIR/rbac.yml"
    echo ""

    echo "### Creating a secret hosting your SSH public key"
    execute_kubectl "create secret generic quarkus-dev-ssh-key --from-file=key=$PUBLIC_KEY_PASS"
    echo ""

    echo "### Creating the Fedora podman virtual machine"
    execute_kubectl "apply -f manifest/installation/virt/quarkus-dev-virtualmachine.yml"
    echo ""

    echo "### Apply the label: argocd.argoproj.io/managed-by=<argocd_namespace> on your namespace"
    execute_kubectl "label namespace $NAMESPACE argocd.argoproj.io/managed-by=openshift-gitops"
    echo ""

    echo "### Adding your namespace to the parameter: sourceNamespaces of the ArgoCD CR ..."
    ARGOCD_NAME="argocd"
    NAMESPACE_ARGOCD="openshift-gitops"

    # Fetch the current ArgoCD resource
    ARGOCD_JSON=$(kubectl get argocd $ARGOCD_NAME -n $NAMESPACE_ARGOCD -o json)

    if echo "$ARGOCD_JSON" | jq -e --arg ns "$NAMESPACE" '.spec.sourceNamespaces | index($ns)' > /dev/null; then
      echo "Namespace '$NAMESPACE' already exists in sourceNamespaces."
    else
      echo "Adding namespace '$NAMESPACE' to sourceNamespaces."
      PATCH=$(echo "$ARGOCD_JSON" | jq --arg ns "$NAMESPACE" '.spec.sourceNamespaces += [$ns] | {spec: {sourceNamespaces: .spec.sourceNamespaces}}')
      execute_kubectl patch argocd $ARGOCD_NAME -n $NAMESPACE_ARGOCD --type merge --patch "$PATCH"
    fi

    #
    # Installing Backstage
    # 
    BACKSTAGE_APP_BASE_URL="https://backstage-$NAMESPACE.apps.$OCP_CLUSTER_DOMAIN/"
    BACKSTAGE_BACKEND_BASE_URL="https://backstage-$NAMESPACE.apps.$OCP_CLUSTER_DOMAIN/"
    TEMPLATE_URL="https://github.com/q-shift/backstage-playground/blob/main/locations/root.yaml"

    echo "BACKSTAGE_APP_BASE_URL=$BACKSTAGE_APP_BASE_URL" > backstage_env_secret.env
    echo "BACKSTAGE_BACKEND_BASE_URL=$BACKSTAGE_BACKEND_BASE_URL" >> backstage_env_secret.env
    echo "BACKSTAGE_AUTH_TOKEN=$BACKSTAGE_AUTH_TOKEN" >> backstage_env_secret.env
    echo "GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_PERSONAL_ACCESS_TOKEN" >> backstage_env_secret.env
    echo "TEMPLATE_URL=$TEMPLATE_URL" >> backstage_env_secret.env
    echo "ARGOCD_SERVER=$ARGOCD_SERVER" >> backstage_env_secret.env
    echo "ARGOCD_ADMIN_USER=$ARGOCD_ADMIN_USER" >> backstage_env_secret.env
    echo "ARGOCD_ADMIN_PASSWORD=$ARGOCD_ADMIN_PASSWORD" >> backstage_env_secret.env
    echo "KUBERNETES_API_URL=$KUBERNETES_API_URL" >> backstage_env_secret.env

    kubectl create secret generic my-backstage-secrets --from-env-file=backstage_env_secret.env
    echo "NAMESPACE=$NAMESPACE"
    echo "OC_CLUSTER_DOMAIN=$OCP_CLUSTER_DOMAIN"
    export NAMESPACE
    echo "BACKSTAGE_AUTH_TOKEN=$BACKSTAGE_AUTH_TOKEN"
    envsubst < manifest/templates/argocd.yaml.tmpl > argocd.yaml
    execute_kubectl apply -f argocd.yaml
}

# Check if at least one argument is provided
if [[ $# -lt 1 ]]; then
    echo "Usage: $0 {dev|provision-namespace} [OPTIONS]"
    exit 1
fi

# Determine the subcommand
case "$1" in
    dev)
        shift # Remove the subcommand from the arguments
        dev "$@"
        ;;
    provision-namespace)
        shift # Remove the subcommand from the arguments
        provision_namespace "$@"
        ;;
    *)
        echo "Invalid subcommand: $1"
        echo "Usage: $0 {dev|provision-namespace} [OPTIONS]"
        exit 1
        ;;
esac
